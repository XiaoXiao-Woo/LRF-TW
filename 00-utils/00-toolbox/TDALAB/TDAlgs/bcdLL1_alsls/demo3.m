% demo 3 to test bcdLL1_alsl algorithm.
% The purpose of this demo is to observe the different convergence curves for 
% different line search method and different initializations.
% The starting point is generated with bcdLL1_init.m function. The first starting point
% is generated by generalized EVD and the others are random.
clear all
close all
clc

%**********************************************
%--- Choose PARAMETERS of the DEMO
%**********************************************
    %--- Data parameters ----
    data_type='complex';       % choose 'real' or 'complex' to select the kind of data to generate
    I=16;                      % Dimensions  of the tensor
    J=21;
    K=10;
    R=4;                       % number of components
    L=4;                       % rank of the R component matrices A and B
    L_vec=L*ones(1,R);
    SNR=40;                    % SNR [dB], choose SNR=inf for a noise-free model
    power_max=5;               % Each of the R terms is normalized and then multiplied by a value between 1 and power_max. 
                               % The highest this value, the more difficult the problem is (swamps are more likely)
    power_vec=linspace(1,power_max,R);   % Holds the set of R amplitude values
       
    %--- Algorithm parameters
    comp='on';          % ='on' or ='off' to perform or not dimensionality reduction 
    Tol1=1e-8;          % Tolerance 
    MaxIt1=5000;        % Max number of iterations
    Tol2=1e-6;          % tolerance in refinement stage (after decompression)
    MaxIt2=500;         % Max number of iterations in refinement stage
    Ninit=5;            % Number of initializations

    
%***************************************************
%---- Build Loading matrices and observed tensor-----
%**************************************************** 
if strcmp(data_type,'real')==1
    A=randn(I,R*L);B=randn(J,R*L);C=randn(K,R);
elseif strcmp(data_type,'complex')==1   
    A=randn(I,R*L)+j*randn(I,R*L);B=randn(J,R*L)+j*randn(J,R*L);C=randn(K,R)+j*randn(K,R);
end

% Create observed tensor that follows the BCD-(L,L,1) model
X_mat=zeros(I*J,K);
for r=1:R
    Xr=reshape(A(:,(r-1)*L+1:r*L)*B(:,(r-1)*L+1:r*L).',I*J,1)*C(:,r).';
    X_mat=X_mat + power_vec(r)*Xr/norm(Xr,'fro');
end
X=reshape(X_mat,I,J,K);

%---- Possibly Add noise---------
if strcmp(data_type,'real')==1
   Noise_tens=randn(I,J,K);
elseif strcmp(data_type,'complex')==1
   Noise_tens=randn(I,J,K)+j*randn(I,J,K);
end
sigma=(10^(-SNR/20))*(norm(reshape(X,J*I,K),'fro')/norm(reshape(Noise_tens,J*I,K),'fro'));
X=X+sigma*Noise_tens;


%-------------------------------------------------------------------------------
% Compute the BCD-(L,L,1) for several initializations
%-------------------------------------------------------------------------------
for ninit=1:Ninit
    disp(['Initialization ',num2str(ninit)])
    
    % generate matrices to initialize 
    if ninit==1
      [A_init,B_init,C_init]=bcdLL1_init(X,R,L,'gevd');     
    else
      [A_init,B_init,C_init]=bcdLL1_init(X,R,L,'random');  
    end
         
    %-----------------------------------------------------
    %  COMPUTE THE DECOMPOSITION for this initialization
    %-----------------------------------------------------
    disp('Algorithm 1: als without line search')
    [A_est,B_est,C_est,phi,it1,it2,phi_als]=bcdLL1_alsls(X,R,L,'none',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    disp('Algorithm 2: als with line search proposed by Harshman')
    [A_est,B_est,C_est,phi,it1,it2,phi_lsh]=bcdLL1_alsls(X,R,L,'lsh',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    disp('Algorithm 3: als with line search proposed by Bro')
    [A_est,B_est,C_est,phi,it1,it2,phi_lsb]=bcdLL1_alsls(X,R,L,'lsb',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    disp('Algorithm 4: als with exact line search and real step')
    [A_est,B_est,C_est,phi,it1,it2,phi_elsr]=bcdLL1_alsls(X,R,L,'elsr',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);
    disp('Algorithm 5: als with exact line search and complex step')
    [A_est,B_est,C_est,phi,it1,it2,phi_elsc]=bcdLL1_alsls(X,R,L,'elsc',comp,Tol1,MaxIt1,Tol2,MaxIt2,Ninit,A_init,B_init,C_init);

    figure
    loglog(phi_als,'b','LineWidth',2);hold on;
    loglog(phi_lsh,'y','LineWidth',2);
    loglog(phi_lsb,'r','LineWidth',2);
    loglog(phi_elsr,'m','LineWidth',2);
    loglog(phi_elsc,'c','LineWidth',2);
    xlabel('Iterations')
    ylabel('phi')
    title(['Evolution of phi for initialization ',num2str(ninit)])
    legend('als','als+lsh','als+lsb','als+elsr','als+elsc')
end